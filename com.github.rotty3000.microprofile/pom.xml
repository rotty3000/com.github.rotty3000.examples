<?xml version="1.0" encoding="UTF-8"?>
<!--
/**
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<parent>
		<artifactId>com.github.rotty3000.maven.step0</artifactId>
		<groupId>com.github.rotty3000</groupId>
		<version>0.0.1-SNAPSHOT</version>
		<relativePath>../com.github.rotty3000.maven.step0/</relativePath>
	</parent>

	<artifactId>com.github.rotty3000.microprofile</artifactId>
	<groupId>com.github.rotty3000</groupId>
	<version>0.0.1-SNAPSHOT</version>

	<properties>
		<geronimo-microprofile.version>1.0.2</geronimo-microprofile.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.apache.geronimo.specs</groupId>
			<artifactId>geronimo-atinject_1.0_spec</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.geronimo.specs</groupId>
			<artifactId>geronimo-annotation_1.3_spec</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.geronimo.specs</groupId>
			<artifactId>geronimo-jcdi_2.0_spec</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.geronimo.specs</groupId>
			<artifactId>geronimo-json_1.1_spec</artifactId>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.service.cdi</artifactId>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.service.configurator</artifactId>
			<version>1.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>org.osgi.service.log</artifactId>
			<version>1.4.0</version><!--$NO-MVN-MAN-VER$-->
		</dependency>

		<dependency>
			<groupId>org.apache.aries.jax.rs</groupId>
			<artifactId>org.apache.aries.jax.rs.whiteboard</artifactId>
			<version>1.0.6</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.felix</groupId>
			<artifactId>org.apache.felix.configadmin</artifactId>
			<version>1.9.16</version><!--$NO-MVN-MAN-VER$-->
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.felix</groupId>
			<artifactId>org.apache.felix.configurator</artifactId>
			<version>1.0.10</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.felix</groupId>
			<artifactId>org.apache.felix.converter</artifactId>
			<version>1.0.10</version><!--$NO-MVN-MAN-VER$-->
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.johnzon</groupId>
			<artifactId>johnzon-core</artifactId>
			<version>1.2.1</version>
			<scope>runtime</scope>
		</dependency>

		<!-- This is the jar which gives us the nice logging support for logback and transitively brings all we need. -->
		<dependency>
			<groupId>org.apache.felix</groupId>
			<artifactId>org.apache.felix.logback</artifactId>
		</dependency>

		<dependency>
			<groupId>biz.aQute.bnd</groupId>
			<artifactId>biz.aQute.junit</artifactId>
			<version>${bnd.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.felix</groupId>
			<artifactId>org.apache.felix.gogo.runtime</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.osgi</groupId>
			<artifactId>osgi.core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.aries.testsupport</groupId>
			<artifactId>org.apache.aries.testsupport.it</artifactId>
			<version>1.0.0-SNAPSHOT</version>
		</dependency>
	</dependencies>

	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.apache.aries.jax.rs</groupId>
				<artifactId>org.apache.aries.jax.rs</artifactId>
				<version>1.0.6</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.geronimo</groupId>
				<artifactId>geronimo-microprofile-aggregator</artifactId>
				<version>${geronimo-microprofile.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<dependency>
				<groupId>org.apache.aries.cdi</groupId>
				<artifactId>org.apache.aries.cdi.bom</artifactId>
				<version>1.0.3-SNAPSHOT</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<!-- This builds our OSGi jar. -->
			<plugin>
				<groupId>biz.aQute.bnd</groupId>
				<artifactId>bnd-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>bnd-process</id>
						<goals>
							<goal>bnd-process</goal>
						</goals>
					</execution>
					<!-- Integration Test Configuration -->
					<execution>
						<id>bnd-process-test</id>
						<phase>process-test-classes</phase>
						<goals>
							<goal>bnd-process</goal>
						</goals>
						<configuration>
							<bnd><![CDATA[
								Bundle-SymbolicName: ${project.artifactId}-test
								Fragment-Host: ${project.artifactId}
								Test-Cases: ${classes;CONCRETE;ANNOTATED;org.junit.Test}
								-fixupmessages: "Host ${project.artifactId}=...";is:=ignore
							]]></bnd>
							<classesDir>${project.build.testOutputDirectory}</classesDir>
							<outputDir>${project.build.testOutputDirectory}</outputDir>
							<manifestPath>${project.build.testOutputDirectory}/META-INF/MANIFEST.MF</manifestPath>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- This dynamically calculates all the things we need to run our code. -->
			<plugin>
				<groupId>biz.aQute.bnd</groupId>
				<artifactId>bnd-resolver-maven-plugin</artifactId>
				<configuration>
					<failOnChanges>false</failOnChanges>
					<includeDependencyManagement>true</includeDependencyManagement>
				</configuration>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>resolve</goal>
						</goals>
						<configuration>
							<bndruns>
								<bndrun>microprofile.bndrun</bndrun>
							</bndruns>
						</configuration>
					</execution>
					<!-- Integration Test Configuration -->
					<execution>
						<id>resolve-test</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>resolve</goal>
						</goals>
						<configuration>
							<scopes>
								<scope>compile</scope>
								<scope>runtime</scope>
								<scope>test</scope>
							</scopes>
							<bundles>
								<bundle>target/${project.build.finalName}-test.jar</bundle>
							</bundles>
							<bndruns>
								<bndrun>test.bndrun</bndrun>
							</bndruns>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- This is the plugin runs the OSGi integration tests. -->
			<plugin>
				<groupId>biz.aQute.bnd</groupId>
				<artifactId>bnd-testing-maven-plugin</artifactId>
				<version>${bnd.version}</version>
				<configuration>
					<failOnChanges>false</failOnChanges>
					<resolve>false</resolve>
					<includeDependencyManagement>true</includeDependencyManagement>
					<scopes>
						<scope>compile</scope>
						<scope>runtime</scope>
						<scope>test</scope>
					</scopes>
					<bundles>
						<bundle>target/${project.build.finalName}-test.jar</bundle>
					</bundles>
					<bndruns>
						<bndrun>test.bndrun</bndrun>
					</bndruns>
				</configuration>
				<executions>
					<execution>
						<id>testing</id>
						<goals>
							<goal>testing</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- This lets you run your project. Try:

			]$ mvn package bnd-run:run@microprofile

			-->
			<plugin>
				<groupId>biz.aQute.bnd</groupId>
				<artifactId>bnd-run-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>microprofile</id>
						<configuration>
							<includeDependencyManagement>true</includeDependencyManagement>
							<bndrun>microprofile.bndrun</bndrun>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- This generates an executable jar from the above resolution.

			From the root dir, try:

			]$ java -jar com.github.rotty3000.maven.step4/target/step4.jar

			-->
			<plugin>
				<groupId>biz.aQute.bnd</groupId>
				<artifactId>bnd-export-maven-plugin</artifactId>
				<configuration>
					<bndruns>
						<bndrun>microprofile.bndrun</bndrun>
					</bndruns>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<executions>
					<execution>
						<id>default-jar</id>
						<configuration>
							<archive>
								<manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
							</archive>
						</configuration>
					</execution>
					<execution>
						<id>test-jar</id>
						<phase>package</phase>
						<goals>
							<goal>jar</goal>
						</goals>
						<configuration>
							<classifier>test</classifier>
							<classesDirectory>${project.build.testOutputDirectory}</classesDirectory>
							<archive>
								<manifestFile>${project.build.testOutputDirectory}/META-INF/MANIFEST.MF</manifestFile>
							</archive>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
